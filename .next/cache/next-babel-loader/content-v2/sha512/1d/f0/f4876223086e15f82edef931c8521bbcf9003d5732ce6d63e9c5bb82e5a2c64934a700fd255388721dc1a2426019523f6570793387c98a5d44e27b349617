{"ast":null,"code":"var _jsxFileName = \"C:\\\\PROJETOS\\\\react-next-movie-app\\\\components\\\\movieList.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Link from \"next/link\";\n\nclass MovieList extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"shorten\", (text, maxLength) => {\n      if (text && text.length > maxLength) {\n        return text.substr(0, maxLength) + \"...\";\n      }\n\n      return text;\n    });\n  }\n\n  renderMovies(movies) {\n    return movies.map(movie => __jsx(\"div\", {\n      key: movie.id,\n      className: \"col-lg-3 col-md-6 mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"card h-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }, __jsx(Link, {\n      href: \"/movies/[id]\",\n      as: `/movies/${movie.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }\n    }, __jsx(\"img\", {\n      className: \"card-img-top\",\n      src: `https://image.tmdb.org/t/p/original${movie.poster_path}`,\n      alt: movie.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 15\n      }\n    }))), __jsx(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }\n    }, __jsx(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    }, __jsx(Link, {\n      href: \"/movies/[id]\",\n      as: `/movies/${movie.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      className: \"text-dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }\n    }, movie.title))), __jsx(\"div\", {\n      className: \"movie-genre text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, movie.genre), __jsx(\"p\", {\n      className: \"card-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, this.shorten(movie.overview, 100)), __jsx(\"p\", {\n      className: \"card-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, __jsx(\"small\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }\n    }, `Release date: ${movie.release_date}`))), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    }, __jsx(\"small\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, movie.vote_average)))));\n  } // TODO: Implement pagination. The themoviedb api is prepared.\n\n\n  render() {\n    const {\n      movies\n    } = this.props;\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 12\n      }\n    }, this.renderMovies(movies));\n  }\n\n}\n\nexport default MovieList;","map":{"version":3,"sources":["C:/PROJETOS/react-next-movie-app/components/movieList.js"],"names":["React","Link","MovieList","Component","text","maxLength","length","substr","renderMovies","movies","map","movie","id","poster_path","title","genre","shorten","overview","release_date","vote_average","render","props"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Link from \"next/link\";\r\n\r\nclass MovieList extends React.Component {\r\n  shorten = (text, maxLength) => {\r\n    if (text && text.length > maxLength) {\r\n      return text.substr(0, maxLength) + \"...\";\r\n    }\r\n    return text;\r\n  };\r\n\r\n  renderMovies(movies) {\r\n    return movies.map((movie) => (\r\n      <div key={movie.id} className=\"col-lg-3 col-md-6 mb-4\">\r\n        <div className=\"card h-100\">\r\n          <Link href=\"/movies/[id]\" as={`/movies/${movie.id}`}>\r\n            <a>\r\n              <img\r\n                className=\"card-img-top\"\r\n                src={`https://image.tmdb.org/t/p/original${movie.poster_path}`}\r\n                alt={movie.title}\r\n              />\r\n            </a>\r\n          </Link>\r\n          <div className=\"card-body\">\r\n            <h4 className=\"card-title\">\r\n              <Link href=\"/movies/[id]\" as={`/movies/${movie.id}`}>\r\n                <a className=\"text-dark\">{movie.title}</a>\r\n              </Link>\r\n            </h4>\r\n            <div className=\"movie-genre text-muted\">{movie.genre}</div>\r\n            <p className=\"card-text\">{this.shorten(movie.overview, 100)}</p>\r\n            <p className=\"card-text\">\r\n              <small className=\"text-muted\">{`Release date: ${movie.release_date}`}</small>\r\n            </p>\r\n          </div>\r\n          <div className=\"card-footer\">\r\n            <small className=\"text-muted\">{movie.vote_average}</small>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ));\r\n  }\r\n\r\n  // TODO: Implement pagination. The themoviedb api is prepared.\r\n\r\n  render() {\r\n    const { movies } = this.props;\r\n    return <React.Fragment>{this.renderMovies(movies)}</React.Fragment>;\r\n  }\r\n}\r\n\r\nexport default MovieList;\r\n"]},"metadata":{},"sourceType":"module"}